/* tslint:disable */
/* eslint-disable */
/**
 * BildMlue.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcceptIncidentInDto
 */
export interface AcceptIncidentInDto {
    /**
     * 
     * @type {string}
     * @memberof AcceptIncidentInDto
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof AcceptIncidentInDto
     */
    'isCprCapable': boolean;
}
/**
 * 
 * @export
 * @interface AedOutDto
 */
export interface AedOutDto {
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof AedOutDto
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof AedOutDto
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'htmlDescription': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AedOutDto
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AedOutDto
     */
    'isMobile': boolean;
}
/**
 * 
 * @export
 * @interface AssignmentOutDto
 */
export interface AssignmentOutDto {
    /**
     * 
     * @type {AssignmentType}
     * @memberof AssignmentOutDto
     */
    'type': AssignmentType;
    /**
     * 
     * @type {Location}
     * @memberof AssignmentOutDto
     */
    'patientLocation': Location;
    /**
     * 
     * @type {Location}
     * @memberof AssignmentOutDto
     */
    'assignmentLocation': Location;
    /**
     * 
     * @type {AedOutDto}
     * @memberof AssignmentOutDto
     */
    'nearestAED': AedOutDto;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum AssignmentType {
    None = 'None',
    Resuscitation = 'Resuscitation',
    DefibrillatorPickup = 'DefibrillatorPickup',
    DefibrillatorReturn = 'DefibrillatorReturn',
    Assisting = 'Assisting'
}


/**
 * 
 * @export
 * @interface AutomatedExternalDefibrillator
 */
export interface AutomatedExternalDefibrillator {
    /**
     * 
     * @type {string}
     * @memberof AutomatedExternalDefibrillator
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AutomatedExternalDefibrillator
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof AutomatedExternalDefibrillator
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof AutomatedExternalDefibrillator
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof AutomatedExternalDefibrillator
     */
    'htmlDescription': string;
    /**
     * 
     * @type {string}
     * @memberof AutomatedExternalDefibrillator
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AutomatedExternalDefibrillator
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AutomatedExternalDefibrillator
     */
    'isMobile': boolean;
}
/**
 * 
 * @export
 * @interface CardiacArrestIncident
 */
export interface CardiacArrestIncident {
    /**
     * 
     * @type {string}
     * @memberof CardiacArrestIncident
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CardiacArrestIncident
     */
    'body': string;
    /**
     * 
     * @type {number}
     * @memberof CardiacArrestIncident
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CardiacArrestIncident
     */
    'longitude': number;
    /**
     * The time the incident was reported (in UTC).
     * @type {string}
     * @memberof CardiacArrestIncident
     */
    'occurredAt': string;
}
/**
 * 
 * @export
 * @interface CreateIncidentInDto
 */
export interface CreateIncidentInDto {
    /**
     * 
     * @type {number}
     * @memberof CreateIncidentInDto
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CreateIncidentInDto
     */
    'longitude': number;
    /**
     * Whether the person who called the emergency services is CPR capable.
     * @type {boolean}
     * @memberof CreateIncidentInDto
     */
    'callerIsCprCapable': boolean;
}
/**
 * 
 * @export
 * @interface EndIncidentInDto
 */
export interface EndIncidentInDto {
    /**
     * 
     * @type {string}
     * @memberof EndIncidentInDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface IncidentOutDto
 */
export interface IncidentOutDto {
    /**
     * 
     * @type {string}
     * @memberof IncidentOutDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof IncidentOutDto
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof IncidentOutDto
     */
    'longitude': number;
    /**
     * 
     * @type {string}
     * @memberof IncidentOutDto
     */
    'occurredAt': string;
    /**
     * 
     * @type {AutomatedExternalDefibrillator}
     * @memberof IncidentOutDto
     */
    'nearestAED': AutomatedExternalDefibrillator;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string;
}
/**
 * 
 * @export
 * @interface UserOutDto
 */
export interface UserOutDto {
    /**
     * 
     * @type {string}
     * @memberof UserOutDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UserOutDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserOutDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserOutDto
     */
    'firebaseToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserOutDto
     */
    'isCprCapable': boolean;
}
/**
 * 
 * @export
 * @interface UserRegisterInDto
 */
export interface UserRegisterInDto {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterInDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterInDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterInDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRegisterInDto
     */
    'isCprCapable': boolean;
}
/**
 * 
 * @export
 * @interface UserUpdateInDto
 */
export interface UserUpdateInDto {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateInDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateInDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateInDto
     */
    'firebaseToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdateInDto
     */
    'isCprCapable': boolean;
}

/**
 * AedApi - axios parameter creator
 * @export
 */
export const AedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {number} [count] Number of nearest AEDs to return
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAedGet: async (count?: number, latitude?: number, longitude?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/aed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AedApi - functional programming interface
 * @export
 */
export const AedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {number} [count] Number of nearest AEDs to return
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAedGet(count?: number, latitude?: number, longitude?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AedOutDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAedGet(count, latitude, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AedApi - factory interface
 * @export
 */
export const AedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AedApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all AEDs
         * @param {number} [count] Number of nearest AEDs to return
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAedGet(count?: number, latitude?: number, longitude?: number, options?: any): AxiosPromise<Array<AedOutDto>> {
            return localVarFp.apiAedGet(count, latitude, longitude, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AedApi - object-oriented interface
 * @export
 * @class AedApi
 * @extends {BaseAPI}
 */
export class AedApi extends BaseAPI {
    /**
     * 
     * @summary Get all AEDs
     * @param {number} [count] Number of nearest AEDs to return
     * @param {number} [latitude] 
     * @param {number} [longitude] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AedApi
     */
    public apiAedGet(count?: number, latitude?: number, longitude?: number, options?: AxiosRequestConfig) {
        return AedApiFp(this.configuration).apiAedGet(count, latitude, longitude, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IncidentsApi - axios parameter creator
 * @export
 */
export const IncidentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary First responder accepts an incident
         * @param {string} id 
         * @param {AcceptIncidentInDto} [acceptIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdAcceptPost: async (id: string, acceptIncidentInDto?: AcceptIncidentInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncidentsIdAcceptPost', 'id', id)
            const localVarPath = `/api/incidents/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptIncidentInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ends the rescue operation.
         * @param {string} id 
         * @param {EndIncidentInDto} [endIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdEndPost: async (id: string, endIncidentInDto?: EndIncidentInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncidentsIdEndPost', 'id', id)
            const localVarPath = `/api/incidents/{id}/end`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endIncidentInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get incident by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncidentsIdGet', 'id', id)
            const localVarPath = `/api/incidents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report an incident
         * @param {CreateIncidentInDto} [createIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsReportPost: async (createIncidentInDto?: CreateIncidentInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/incidents/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIncidentInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncidentsApi - functional programming interface
 * @export
 */
export const IncidentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncidentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary First responder accepts an incident
         * @param {string} id 
         * @param {AcceptIncidentInDto} [acceptIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncidentsIdAcceptPost(id: string, acceptIncidentInDto?: AcceptIncidentInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncidentsIdAcceptPost(id, acceptIncidentInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Ends the rescue operation.
         * @param {string} id 
         * @param {EndIncidentInDto} [endIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncidentsIdEndPost(id: string, endIncidentInDto?: EndIncidentInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncidentsIdEndPost(id, endIncidentInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get incident by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncidentsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncidentsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Report an incident
         * @param {CreateIncidentInDto} [createIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncidentsReportPost(createIncidentInDto?: CreateIncidentInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentOutDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncidentsReportPost(createIncidentInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IncidentsApi - factory interface
 * @export
 */
export const IncidentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncidentsApiFp(configuration)
    return {
        /**
         * 
         * @summary First responder accepts an incident
         * @param {string} id 
         * @param {AcceptIncidentInDto} [acceptIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdAcceptPost(id: string, acceptIncidentInDto?: AcceptIncidentInDto, options?: any): AxiosPromise<AssignmentOutDto> {
            return localVarFp.apiIncidentsIdAcceptPost(id, acceptIncidentInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ends the rescue operation.
         * @param {string} id 
         * @param {EndIncidentInDto} [endIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdEndPost(id: string, endIncidentInDto?: EndIncidentInDto, options?: any): AxiosPromise<AssignmentOutDto> {
            return localVarFp.apiIncidentsIdEndPost(id, endIncidentInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get incident by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsIdGet(id: string, options?: any): AxiosPromise<IncidentOutDto> {
            return localVarFp.apiIncidentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report an incident
         * @param {CreateIncidentInDto} [createIncidentInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncidentsReportPost(createIncidentInDto?: CreateIncidentInDto, options?: any): AxiosPromise<IncidentOutDto> {
            return localVarFp.apiIncidentsReportPost(createIncidentInDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncidentsApi - object-oriented interface
 * @export
 * @class IncidentsApi
 * @extends {BaseAPI}
 */
export class IncidentsApi extends BaseAPI {
    /**
     * 
     * @summary First responder accepts an incident
     * @param {string} id 
     * @param {AcceptIncidentInDto} [acceptIncidentInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public apiIncidentsIdAcceptPost(id: string, acceptIncidentInDto?: AcceptIncidentInDto, options?: AxiosRequestConfig) {
        return IncidentsApiFp(this.configuration).apiIncidentsIdAcceptPost(id, acceptIncidentInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ends the rescue operation.
     * @param {string} id 
     * @param {EndIncidentInDto} [endIncidentInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public apiIncidentsIdEndPost(id: string, endIncidentInDto?: EndIncidentInDto, options?: AxiosRequestConfig) {
        return IncidentsApiFp(this.configuration).apiIncidentsIdEndPost(id, endIncidentInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get incident by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public apiIncidentsIdGet(id: string, options?: AxiosRequestConfig) {
        return IncidentsApiFp(this.configuration).apiIncidentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report an incident
     * @param {CreateIncidentInDto} [createIncidentInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public apiIncidentsReportPost(createIncidentInDto?: CreateIncidentInDto, options?: AxiosRequestConfig) {
        return IncidentsApiFp(this.configuration).apiIncidentsReportPost(createIncidentInDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PatientsApi - axios parameter creator
 * @export
 */
export const PatientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPatientsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPatientsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPatientsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPatientsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiPatientsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiPatientsGet(options?: AxiosRequestConfig) {
        return PatientsApiFp(this.configuration).apiPatientsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete user - for testing only
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersEmailDelete: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiUsersEmailDelete', 'email', email)
            const localVarPath = `/api/users/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update existing user
         * @param {string} email 
         * @param {UserUpdateInDto} [userUpdateInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersEmailPut: async (email: string, userUpdateInDto?: UserUpdateInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiUsersEmailPut', 'email', email)
            const localVarPath = `/api/users/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all registered users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {UserRegisterInDto} [userRegisterInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersRegisterPost: async (userRegisterInDto?: UserRegisterInDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete user - for testing only
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersEmailDelete(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersEmailDelete(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update existing user
         * @param {string} email 
         * @param {UserUpdateInDto} [userUpdateInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersEmailPut(email: string, userUpdateInDto?: UserUpdateInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersEmailPut(email, userUpdateInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all registered users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserOutDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register new user
         * @param {UserRegisterInDto} [userRegisterInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersRegisterPost(userRegisterInDto?: UserRegisterInDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersRegisterPost(userRegisterInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete user - for testing only
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersEmailDelete(email: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersEmailDelete(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update existing user
         * @param {string} email 
         * @param {UserUpdateInDto} [userUpdateInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersEmailPut(email: string, userUpdateInDto?: UserUpdateInDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersEmailPut(email, userUpdateInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all registered users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options?: any): AxiosPromise<Array<UserOutDto>> {
            return localVarFp.apiUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new user
         * @param {UserRegisterInDto} [userRegisterInDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersRegisterPost(userRegisterInDto?: UserRegisterInDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiUsersRegisterPost(userRegisterInDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Delete user - for testing only
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersEmailDelete(email: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersEmailDelete(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update existing user
     * @param {string} email 
     * @param {UserUpdateInDto} [userUpdateInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersEmailPut(email: string, userUpdateInDto?: UserUpdateInDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersEmailPut(email, userUpdateInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all registered users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new user
     * @param {UserRegisterInDto} [userRegisterInDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersRegisterPost(userRegisterInDto?: UserRegisterInDto, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersRegisterPost(userRegisterInDto, options).then((request) => request(this.axios, this.basePath));
    }
}


